//
//  CloudLogicViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.4
//

import UIKit
import AWSMobileHubHelper

class CloudLogicViewController: UIViewController {
    
    @IBOutlet weak var resetButton: UIButton!
    @IBOutlet weak var invokeButton: UIButton!
    @IBOutlet weak var requestTextView: UITextView!
    @IBOutlet weak var resultTextView: UITextView!
    @IBOutlet weak var functionField: UITextField!
    
    private var activityIndicator: UIActivityIndicatorView!
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        activityIndicator = UIActivityIndicatorView(activityIndicatorStyle: .Gray)
        activityIndicator.hidesWhenStopped = true
        activityIndicator.frame = CGRectMake(0.0, 0.0, 40.0, 40.0)
        activityIndicator.center = view.center
        view.addSubview(activityIndicator)
        activityIndicator.bringSubviewToFront(view)
        
        functionField.delegate = self
    }
    
    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        let cornerRadius: CGFloat = 5
        let borderWidth: CGFloat = 1
        
        let requestTextViewLayer = requestTextView.layer
        requestTextViewLayer.cornerRadius = cornerRadius
        requestTextViewLayer.borderWidth = borderWidth
        requestTextViewLayer.borderColor = UIColor.lightGrayColor().CGColor
        
        let resultTextViewLayer = resultTextView.layer
        resultTextViewLayer.cornerRadius = cornerRadius
        resultTextViewLayer.borderWidth = borderWidth
        resultTextViewLayer.borderColor = UIColor.lightGrayColor().CGColor
        
        let resetButtonLayer = resetButton.layer
        resetButtonLayer.cornerRadius = cornerRadius
        
        let invokeButtonLayer = invokeButton.layer
        invokeButtonLayer.cornerRadius = cornerRadius
    }

    // MARK: - IBActions
    
    @IBAction func handleReset(sender: AnyObject) {
        requestTextView.resignFirstResponder()
        requestTextView.text = "{\n  \"key1\":\"value1\",\n  \"key2\":\"value2\",\n  \"key3\":\"value3\"\n}"
        resultTextView.text = ""
    }
    
    @IBAction func handleInvoke(sender: AnyObject) {
        requestTextView.resignFirstResponder()
        let functionName = functionField.text!
        if functionName.characters.count == 0 {
            resultTextView.text = "Function name is empty."
            return
        }
        print("Function Name: \(functionName)")
        let jsonInput = requestTextView.text.makeJsonable()
        let jsonData = jsonInput.dataUsingEncoding(NSUTF8StringEncoding)!
        var parameters: [String: AnyObject]
        do {
            let anyObj = try NSJSONSerialization.JSONObjectWithData(jsonData, options: []) as! [String: AnyObject]
            parameters = anyObj
        } catch let error as NSError {
            resultTextView.text = "JSON request is not well-formed."
            print("json error: \(error.localizedDescription)")
            return
        }
        print("Json Input: \(jsonInput)")
        
        activityIndicator.startAnimating()

        AWSCloudLogic.defaultCloudLogic().invokeFunction(functionName,
            withParameters: parameters, completionBlock: {(result: AnyObject?, error: NSError?) -> Void in
                if let result = result {
                    dispatch_async(dispatch_get_main_queue(), {
                        print("CloudLogicViewController: Result: \(result)")
                        self.activityIndicator.stopAnimating()
                        self.resultTextView.text = prettyPrintJson(result)
                    })
                }
                var errorMessage: String
                if let error = error {
                    if let cloudUserInfo = error.userInfo as? [String: AnyObject],
                        cloudMessage = cloudUserInfo["errorMessage"] as? String {
                        errorMessage = "Error: \(cloudMessage)"
                    } else {
                        errorMessage = "Error occurred in invoking the Lambda Function. No error message found."
                    }
                    dispatch_async(dispatch_get_main_queue(), {
                        print("Error occurred in invoking Lambda Function: \(error)")
                        self.activityIndicator.stopAnimating()
                        self.resultTextView.text = errorMessage
                        let alertView = UIAlertController(title: NSLocalizedString("Error", comment: "Title bar for error alert."), message: error.localizedDescription, preferredStyle: .Alert)
                        alertView.addAction(UIAlertAction(title: NSLocalizedString("Dismiss", comment: "Button on alert dialog."), style: .Default, handler: nil))
                        self.presentViewController(alertView, animated: true, completion: nil)
                    })
                }
        })
    }
    
    @IBAction func tapRecognized(sender: AnyObject) {
        requestTextView.resignFirstResponder()
        functionField.resignFirstResponder()
    }
}

extension CloudLogicViewController: UITextFieldDelegate {
    func textFieldShouldReturn(textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

extension String {
    private func makeJsonable() -> String {
        let resultComponents: NSArray = self.componentsSeparatedByCharactersInSet(NSCharacterSet.newlineCharacterSet())
        return resultComponents.componentsJoinedByString("")
    }
}

