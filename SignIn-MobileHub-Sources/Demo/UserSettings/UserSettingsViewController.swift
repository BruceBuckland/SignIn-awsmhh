//
//  UserSettingsViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.4
//

import UIKit

class UserSettingsViewController: UIViewController {
    
    private var themes: [Theme]!
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let theme0 = Theme(titleTextColor: Int32(bitPattern: 0xFFFFFFFF),
                           withTitleBarColor: Int32(bitPattern: 0xFFF58535),
                           withBackgroundColor: Int32(bitPattern: 0xFFFFFFFF))
        let theme1 = Theme(titleTextColor: Int32(bitPattern: 0xFFDDDDDD),
                           withTitleBarColor: Int32(bitPattern: 0xFF00D2FF),
                           withBackgroundColor: Int32(bitPattern: 0xFFEEEEEE))
        let theme2 = Theme(titleTextColor: Int32(bitPattern: 0xFFFFFFFF),
                           withTitleBarColor: Int32(bitPattern: 0xFF00D2A9),
                           withBackgroundColor: Int32(bitPattern: 0xFFC8FFFF))
        let theme3 = Theme(titleTextColor: Int32(bitPattern: 0xFFFFFF00),
                           withTitleBarColor: Int32(bitPattern: 0xFF000000),
                           withBackgroundColor: Int32(bitPattern: 0xFFFFFFDC))
        
        themes = [theme0, theme1, theme2, theme3]
        loadAppearance()
    }
    
    // MARK: - IBActions
    
    @IBAction func handlerSettings0(sender: AnyObject) {
        updateAppearanceWithTheme(self.themes[0])
        saveAppearance(self.themes[0])
    }
    
    @IBAction func handlerSettings1(sender: AnyObject) {
        updateAppearanceWithTheme(self.themes[1])
        saveAppearance(self.themes[1])
    }
    
    @IBAction func handlerSettings2(sender: AnyObject) {
        updateAppearanceWithTheme(self.themes[2])
        saveAppearance(self.themes[2])
    }
    
    @IBAction func handlerSettings3(sender: AnyObject) {
        updateAppearanceWithTheme(self.themes[3])
        saveAppearance(self.themes[3])
    }
    
    // MARK: - Utility Methods
    
    private func loadAppearance() {
        let settings = ColorThemeSettings.sharedInstance
        settings.loadSettings { (themeSettings: ColorThemeSettings?, error: NSError?) -> Void in
            guard let themeSettings = themeSettings else {
                print("Failed to load color from dataset: \(error)")
                return
            }
            dispatch_async(dispatch_get_main_queue(), {
                let theme = themeSettings.theme
                self.updateAppearanceWithTheme(theme)
            })
        }
    }
    
    private func saveAppearance(theme: Theme) {
        let settings: ColorThemeSettings = ColorThemeSettings.sharedInstance
        settings.theme = theme
        settings.saveSettings(nil)
    }
    
    private func updateAppearanceWithTheme(theme: Theme) {
        let titleTextColor =  theme.titleTextColor.UIColorFromARGB()
        navigationController!.navigationBar.barTintColor = theme.titleBarColor.UIColorFromARGB()
        navigationController!.navigationBar.tintColor = titleTextColor
        navigationController!.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName: titleTextColor]
        navigationController?.viewControllers.first?.view.backgroundColor = theme.backgroundColor.UIColorFromARGB()
        view.backgroundColor = theme.backgroundColor.UIColorFromARGB()
    }
    
    private func showErrorDialog(error: NSError) {
        print("User Settings Error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Error",
            comment: "Title bar for alert dialog."),
                                                message: "User Settings Error: \(error.localizedDescription)",
                                                preferredStyle: .Alert)
        let alertAction = UIAlertAction(title: NSLocalizedString("OK",
            comment: "Button on alert dialog."),
                                        style: .Default, handler: nil)
        alertController.addAction(alertAction)
        presentViewController(alertController, animated: true, completion: nil)
    }
}
